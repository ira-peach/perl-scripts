#!/usr/bin/env perl

# flux-kubectl - wrap around kubectl functionality
# Copyright (C) 2024  Ira Peach
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

use v5.32.1;
use warnings;
use strict;

use File::Basename;
use File::Find qw(find);
use File::Path qw(make_path);
use Getopt::Long qw(:config gnu_getopt no_ignore_case no_auto_abbrev);
use POSIX qw(strftime);
use String::ShellQuote qw(shell_quote);
use YAML::XS qw(Dump Load);
# TODO: Use this for singular/plural conversions
#Lingua::EN::Inflect

# Don't convert paths to win32-style; this will break some subcommands, like
# shell arguments to pods.
$ENV{MSYS_NO_PATHCONV} = 1;
$ENV{MSYS2_ARG_CONV_EXCL} = "*";
$ENV{KUBECTL_EDITOR} = $ENV{VISUAL} // $ENV{EDITOR} // $ENV{KUBECTL_EDITOR};

my $version = 1;

$| = 1;

my $now = time();
$now = strftime('%Y-%m-%d_%H%M%SZ', gmtime($now));

sub usage {
    my $prog = basename $0;
    say "usage: $prog KIND [OPTIONS]...";
    say "       $prog pods [OPTIONS]... --logs [CONTAINER] -- [ADDITIONAL_OPTS]...";
    say "       $prog pods [OPTIONS]... [-t] -s [CONTAINER] -- [ADDITIONAL_OPTS]...";
    say "";
    say "  wrap around kubectl functionality";
    say "";
    say "  -h,--help                    display this usage and exit";
    say "  -c|--container               show containers on pods";
    say "  -d|--delete                  delete matching resources of KIND";
    say "  --dry-run                    print commands instead of executing";
    say "  --edit                       edit resource (uses VISUAL, EDITOR, or KUBECTL_EDITOR for editor)";
    say "  -F|--field NUM=REGEX         match field NUM with REGEX (starting from 1)";
    say "  --follow                     follow when given --logs";
    say "  -g|--get                     get resource (default action)";
    say "  --getx                       get resource, but do not process data in the program (used for debugging)";
    say "  -i|--stdin                   pass stdin for --shell";
    say "  --logs                       get logs from kind pod";
    say "  --explain                    explain kind";
    say "  -P|--preserve-columns        preserve fixed-width columns on output instead of converting to tab-separated value";
    say "  -R|--reconcile               reconcile kustomization kind (with source)";
    say "  -s|--shell CONTAINER         shell into matched pod and CONTAINER (use '' for autoselect)";
    say "  -t|--tty                     set stdin as a TTY";
    say "  -y|--yaml                    output yaml";
    say "  -v,--verbose                 add more verbose messaging";
    say "  -V,--version                 show version";
}

sub version {
    my $prog = basename $0;
    say "$prog version $version";
    say "Copyright (C) 2024  Ira Peach";
    say "License AGPLv3+: GNU AGPL version 3 or later <https://gnu.org/licenses/agpl.html>";
    say "This program is free software: you are free to change and redistribute it.";
    say "There is NO WARRANTY, to the extent permitted by law.";
}

# The tricky thing about the default kubectl output is that it is fixed width
# upon generation, but those widths can change depending on what's running in
# the cluster.  Additionally, values can either be omitted or have spaces in
# them, which makes using awk tricky later.  Here, we standardize the output to
# be tab-separated with the column names.
#
# This will return a hash with data and lengths as arrays (guaranteed same
# length), and format (to pack and unpack the data).  Each length is the total
# length of each column slice.
sub parse_fixed_width_data {
    my ($fh) = @_;
    my $header = <$fh>;

    my @data = ();
    my @data_lengths = ();
    my @datum = ();
    while (1) {
        my $header_regex = '^([-A-Z0-9_]+ +)';
        my $match = $header =~ $header_regex;
        $header =~ /(.*)/;
        $header =~ s/$header_regex//;
        $header = "" unless $match;
        my $length = length $1;
        my $name = $1;
        $name =~ s/ +$//;

        push @datum, $name;
        push @data_lengths, $length;
        last unless $match;
    }
    push @data, \@datum;

    my $format = "";
    my $count = 0;
    for my $length (@data_lengths) {
        $count++;
        if ($count == scalar @data_lengths) {
            $format = "${format}A*";
        }
        else {
            $format = "${format}A$length ";
        }
    }

    while (<$fh>) {
        my @datum = unpack $format;
        push @data, \@datum;
    }

    my $ret = {
        data => \@data,
        lengths => \@data_lengths,
        format => $format,
    };
    return $ret;
}

sub get_containers {
    my ($namespace, $name) = @_;
    my $yaml = qx(kubectl get pod -n "$namespace" "$name" -o yaml);
    my $resource = Load $yaml;
    my @output = ();
    for my $container (@{$resource->{spec}{containers}}) {
        push @output, {
            namespace => $namespace,
            name => $name,
            container => $container,
        };
    }
    return @output;
}

sub get_aliases {
    my $command = "kubectl api-resources";
    my $pid = open(my $fh, "-|", $command) or die "$!";
    my $parsed = parse_fixed_width_data $fh;
    my %output = ();
    my $count = -1;
    for my $datum ($parsed->{data}->@*) {
        $count++;
        next unless $count;
        my $singular = $datum->[0] =~ s/s$//r;
        $output{$singular} = $datum->[0];
        $output{$datum->[0]} = $datum->[0];
        next unless $datum->[1];
        $output{$datum->[1]} = $datum->[0];
    }

    return %output;
}

my @args = ();
sub add_arg {
    push @args, @_;
}

my $action = "get";
my $container = "";
my $dry_run;
my $field_expr = "";
my %match_column;
my $follow;
my $kind;
my $ks_path;
my $output_yaml;
my $preserve_columns;
my $use_tty;
my $use_stdin;
my $verbose;
my $force;

GetOptions(
    "help|h" => sub { usage; exit 0 },
    "build" => sub { $action = "build" },
    "container|c" => sub { $action = "get-container" },
    "delete|d" => sub { $action = "delete"; },
    "dry-run" => \$dry_run,
    "edit" => sub { $action = "edit" },
    "explain" => sub { $action = "explain"; },
    "field|F=s" => sub {
        my ($name,$exprs) = @_;
        # split on non-escaped commas with a lookbehind assertion
        for my $expr (split /(?<!\\),/, $exprs) {
            my ($column_number,$match,@rest) = split '=',$expr;
            die "bad match expr\n" if scalar @rest;
            die "bad match expr\n" unless $column_number;
            die "bad match expr\n" unless $match;
            $match_column{$column_number} = $match;
        }
    },
    "follow" => \$follow,
    "force|f" => \$force,
    "get|g" => sub { $action = "get"; },
    "getx" => sub { $action = "getx"; },
    "logs" => sub { $action = "logs" },
    "preserve-columns|P" => \$preserve_columns,
    "shell|s" => sub { $action = "shell" },
    "stdin|i" => \$use_stdin,
    "reconcile|R" => sub { $action = "reconcile" },
    "tty|t" => \$use_tty,
    "yaml|y" => \$output_yaml,
    "verbose|v!" => \$verbose,
    "version|V" => sub { version; exit 0 },
    "<>" => \&add_arg)
or die "error in command line arguments\n";

$kind = shift @args // die "please provide resource kind\n";

if ($action eq "logs" or $action eq "shell") {
    $container = shift @args if @args;
}
elsif ($action eq "build") {
    $ks_path = shift @args;
    if (-f $ks_path and basename($ks_path) eq "kustomization.yaml") {
        $ks_path = dirname $ks_path;
    }
    my @command = ("kustomize", "build", "$ks_path");
    my $shell_command = shell_quote @command;
    system "sh", "-c", $shell_command;
    exit 0;
}

die "too many arguments (use -- to pass additional arguments to kubectl, flux, or kustomize)" if scalar @args > 0;

push @args, @ARGV;

if ($action eq "explain") {
    my @command = ("kubectl", "explain", $kind);
    push @command, @args;
    my $shell_command = shell_quote @command;
    if ($dry_run) {
        warn "dry run: $shell_command\n";
        exit 0;
    }
    system("sh", "-c", $shell_command);
    my $status = $? >> 8;
    exit $status;
}

my %aliases = get_aliases;
die "unknown kind '$kind'" unless $aliases{$kind};
$kind = $aliases{$kind};
warn "verbose: kind is '$kind'\n" if $verbose;

if ($action eq "logs" and $kind ne "pods") {
    die "--logs is only compatible with kind 'pod'";
}
elsif ($action eq "build" and $kind ne "kustomizations") {
    die "--build is only compatible with kind 'kustomization'";
}

if ($output_yaml) {
    die "yaml output only valid for get action" if $action ne "get";
    my @command = ("kubectl", "get", $kind, "-A", "-o", "yaml");
    push @command, @args;
    my $shell_command = shell_quote @command;
    if ($dry_run) {
        warn "dry run: $shell_command\n";
        exit 0;
    }
    system($shell_command);
    exit $? >> 8;
}

my $command = qq(kubectl get "$kind" -A -o wide);
warn "dry run: $command\n" if $dry_run;
my $pid = open(my $fh, "-|", $command) or die "$!";

my $parsed = parse_fixed_width_data $fh;
my @data = @{$parsed->{data}};
my @data_lengths = @{$parsed->{lengths}};
my $fmt = $parsed->{format};
my $is_namespaced = $data[0][0] eq "NAMESPACE";

if ($action eq "get-container") {
    say "NAMESPACE\tNAME\tCONTAINER";
}

my $count = -1;
OUTER: for my $datum (@data) {
    ++$count;
    if ($count) {
        for my $key (keys %match_column) {
            my $match_expr = $match_column{$key};
            if (substr($match_expr,0,1) eq "!") {
                $match_expr = substr($match_expr,1);
                next OUTER if $datum->[$key-1] =~ /$match_expr/;
            }
            else {
                next OUTER unless $datum->[$key-1] =~ /$match_expr/;
            }
            #warn "$datum->[$key-1] =~ /$match_expr/";
        }
    }

    if ($action eq "edit") {
        next unless $count;
        my $namespace;
        my $name;
        if ($is_namespaced) {
            $namespace = $datum->[0];
            $name = $datum->[1];
        }
        else {
            $name = $datum->[0];
        }

        my @command = ("kubectl", "edit", $kind);
        if ($is_namespaced) {
            push @command, "-n";
            push @command, $namespace;
        }
        push @command, $name;
        my $shell_command = shell_quote @command;
        system($shell_command);
        my $status = $? >> 8;
        if ($status) {
            unless ($force) {
                warn "error: last command exited with status $status.  Exiting (use --force to ignore)\n";
                exit $status;
            }
            warn "warning: last command exited with status $status.  Ignoring error due to --force\n";
        }
    }
    elsif ($action eq "logs") {
        next unless $count;
        my $namespace = $datum->[0];
        my $name = $datum->[1];
        my @command = (
            "kubectl",
            "logs",
            "-n",
            $namespace,
            $name,
            "--timestamps=true",
        );
        if ($container) {
            push @command, "-c", $container;
        }
        else {
            push @command, "--all-containers=true";
        }
        push @command, "--follow=true" if $follow;
        push @command, @args if @args;
        my $shell_command = shell_quote @command;
        if ($dry_run) {
            warn "dry run: $shell_command\n";
            next;
        }
        system("sh", "-c", $shell_command);
    }
    elsif ($action eq "get") {
        next if $dry_run;
        if ($preserve_columns) {
            my $line = pack $fmt, @$datum;
            say $line;
        }
        else {
            say join "\t",@$datum;
        }
    }
    elsif ($action eq "shell") {
        next unless $count;
        die "type should be pod for shell action\n" unless $kind eq "pods";
        my $namespace = $datum->[0];
        my $name = $datum->[1];
        my $selected_container = $container;
        unless ($selected_container) {
            my @containers = get_containers $namespace, $name;
            $selected_container = $containers[0]->{container}{name};
            warn "warning: container automatically set to '$selected_container'\n";
        }

        my @command = (
            "kubectl",
            "exec",
            "-n",
            $namespace,
            $name,
            "-c",
            $selected_container,
        );

        if ($use_stdin) {
            push @command, "-i";
        }

        if ($use_tty) {
            push @command, "-t";
        }
        push @command, "--";

        if (@args) {
            push @command, @args
        }
        else {
            push @command, "/bin/sh";
        }

        my $shell_command = shell_quote @command;

        if ($dry_run) {
            warn "dry run: $shell_command\n";
            next;
        }

        system("sh", "-c", $shell_command);
        my $status = $? >> 8;
        if ($status) {
            unless ($force) {
                warn "error: last command exited with status $status.  Exiting (use --force to ignore)\n";
                exit $status;
            }
            warn "warning: last command exited with status $status.  Ignoring error due to --force\n";
        }
    }
    elsif ($action eq "get-container") {
        next unless $count;
        die "type should be pod for shell action\n" unless $kind eq "pods";
        my $namespace = $datum->[0];
        my $name = $datum->[1];
        my $shell_command = qq(kubectl get pod -n "$namespace" "$name" -o yaml);
        if ($dry_run) {
            warn "dry run: $shell_command\n";
            next;
        }
        my $yaml = qx($shell_command);
        my $resource = Load $yaml;
        for my $container (@{$resource->{spec}{containers}}) {
            say "$namespace\t$name\t$container->{name}";
        }
    }
    elsif ($action eq "getx" or $action eq "delete") {
        next unless $count;
        my $real_action;
        if ($action eq "getx") {
            $real_action = "get";
        }
        my $namespace;
        my $name;
        if ($is_namespaced) {
            $namespace = $datum->[0];
            $name = $datum->[1];
        }
        else {
            $name = $datum->[0];
        }
        my @command;
        push @command, "kubectl";
        push @command, $real_action // $action;
        push @command, $kind;
        if ($namespace) {
            push @command, "-n";
            push @command, $namespace;
        }
        push @command, $name;
        if ($action eq "delete" and not $force) {
            my $response = "";
            while (1) {
                if ($dry_run) {
                    $response = "y";
                    last;
                }
                if ($namespace) {
                    print qq;really delete $kind in namespace $namespace with name $name? (y/n) ;;
                }
                else {
                    print qq;really delete $kind with name $name? (y/n) ;;
                }
                $response = <STDIN>;
                chomp $response;
                if ($response =~ /y|n/) {
                    last;
                }
                say "y or n only.  Retry.";
            }

            if ($response ne "y") {
                say "skipping";
                next;
            }
        }
        my $shell_command = shell_quote @command;
        if ($dry_run) {
            warn "dry run: $shell_command\n";
            next;
        }
        system("sh", "-c", $shell_command);
    }
    elsif ($action eq "reconcile") {
        next unless $count;
        die "reconciliation is only available for (flux) kustomizations\n" unless $kind eq "kustomizations";
        my $namespace = $datum->[0];
        my $name = $datum->[1];
        my @command = (
            "flux",
            "reconcile",
            # needs singular for whatever reason
            "kustomization",
            "-n",
            $namespace,
            $name,
            "--with-source",
        );
        push @command, @args;
        my $shell_command = shell_quote @command;
        if ($dry_run) {
            warn "dry run: $shell_command\n";
            next;
        }
        system("sh", "-c", $shell_command);
    }
    else {
        die "unknown action '$action'";
    }
}

warn "warning: no matches (check match conditions?)\n" unless scalar @data > 1;

close $fh or die "$!";
